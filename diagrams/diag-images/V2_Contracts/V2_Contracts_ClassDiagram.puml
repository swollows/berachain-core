@startuml V2_Contracts_ClassDiagram
skinparam classAttributeIconSize 0
hide empty members

package "src/V2_Contracts" {
    class RewardVault <<Contract>> {
        ' 참고: 이 계약은 IRewardVault_V1 인터페이스를 사용합니다.
        + maxIncentiveTokensCount: uint8
        + distributor: address
        + beaconDepositContract: IBeaconDeposit
        + incentives: mapping(address => Incentive)
        + whitelistedTokens: address[]
        + stakeToken: IERC20
        + rewardsToken: IERC20
        + initialize(address, address, address, address)
        + setDistributor(address)
        + notifyRewardAmount(bytes, uint256)
        + recoverERC20(address, uint256)
        + setRewardsDuration(uint256)
        + whitelistIncentiveToken(address, uint256, address)
        + removeIncentiveToken(address)
        + updateIncentiveManager(address, address)
        + setMaxIncentiveTokensCount(uint8)
        + pause()
        + unpause()
        + setOperator(address)
        + addIncentive(address, uint256)
        + setIncentiveRate(address, uint256)
        + stake(uint256)
        + stakeFor(address, uint256)
        + withdraw(uint256)
        + withdrawFor(address, uint256)
        + getReward()
        + getRewardFor(address)
        + delegateStake(address, uint256)
        + withdrawDelegatedStake(address, uint256)
        + balanceOf(address) : uint256
        + earned(address) : uint256
        + getRewardForDuration() : uint256
        + lastTimeRewardApplicable() : uint256
        + rewardPerToken() : uint256
        + getOperator(address) : address
        + getDelegateStake(address, address) : uint256
        + getTotalDelegateStake(address) : uint256
        # _authorizeUpgrade(address) (implicitly via FactoryOwnable)
        # _notifyRewardAmount(uint256)
        # _processIncentives(bytes, uint256)
        # _deleteWhitelistedTokenFromList(address)
        # _checkSelfStakedBalance(address, uint256)
        # _stake(address, uint256)
        # _withdraw(address, uint256)
        # _getReward(address)
        # _updateReward(address)
    }
}

package "src/V1_Contracts/interfaces" {
    interface IRewardVault_V1 <<Interface>>
}

note right of IRewardVault_V1
    Interface used by V2
end note

package "src/pol/interfaces" {
    interface IBeaconDeposit <<Interface>>
    interface IBeraChef <<Interface>>
    interface IDistributor <<Interface>>
    interface IBGTIncentiveDistributor <<Interface>>
}

package "src/base" {
    class FactoryOwnable <<Contract>>
    class StakingRewards <<Contract>>
}

package "src/libraries" {
    class Utils <<Library>>
}

package "@openzeppelin/contracts-upgradeable" {
    class PausableUpgradeable <<Abstract>>
    class ReentrancyGuardUpgradeable <<Abstract>>
}

package "@openzeppelin/contracts" {
    interface IERC20 <<Interface>>
    class SafeERC20 <<Library>>
}

package "solady/src/utils" {
     class FixedPointMathLib <<Library>>
}

' 상속 & 인터페이스
RewardVault .up.|> IRewardVault_V1
note on link
    Interface used by V2
end note

RewardVault <|-- PausableUpgradeable
RewardVault <|-- ReentrancyGuardUpgradeable
RewardVault <|-- FactoryOwnable
RewardVault <|-- StakingRewards

' 의존성
RewardVault ..> Utils : uses
RewardVault ..> SafeERC20 : uses
RewardVault ..> FixedPointMathLib : uses
RewardVault ..> IBeaconDeposit : uses
RewardVault ..> IBeraChef : uses (implicitly via Distributor)
RewardVault ..> IDistributor : uses
RewardVault ..> IBGTIncentiveDistributor : uses (implicitly)

@enduml 